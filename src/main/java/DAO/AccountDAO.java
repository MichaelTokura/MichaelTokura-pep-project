package DAO;

import Model.Account;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * This class interacts with the Accounts table in the database.
 */
public class AccountDAO {

    private Connection connection;

    public AccountDAO(Connection connection) {
        this.connection = connection;
    }

    /**
     * Retrieves an Account from the database by username.
     * @param username The username of the account to retrieve.
     * @return The Account object, or null if not found.
     * @throws SQLException If a database error occurs.
     */
    public Account getAccountByUsername(String username) throws SQLException {
        String sql = "SELECT * FROM account WHERE username = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, username);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return extractAccountFromResultSet(resultSet);
                }
            }
        }
        return null;
    }


    /**
     * Retrieves an Account from the database by ID.
     * @param account_id The ID of the account to retrieve.
     * @return The Account object, or null if not found.
     * @throws SQLException If a database error occurs.
     */
    public Account getAccountById(int account_id) throws SQLException {
        String sql = "SELECT * FROM account WHERE account_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, account_id);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return extractAccountFromResultSet(resultSet);
                }
            }
        }
        return null;
    }


    /**
     * Retrieves all Accounts from the database.
     * @return A list of all Account objects.
     * @throws SQLException If a database error occurs.
     */
    public List<Account> getAllAccounts() throws SQLException {
        List<Account> accounts = new ArrayList<>();
        String sql = "SELECT * FROM account";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
            while (resultSet.next()) {
                accounts.add(extractAccountFromResultSet(resultSet));
            }
        }
        return accounts;
    }

    /**
     * Adds a new Account to the database.  The account_id is generated by the database.
     * @param account The Account object to add.
     * @return The newly created Account object (now with the generated ID), or null if the insert failed.
     * @throws SQLException If a database error occurs.
     */
    public Account addAccount(Account account) throws SQLException {
        String sql = "INSERT INTO account (username, password) VALUES (?, ?);";
        try (PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, account.getUsername());
            statement.setString(2, account.getPassword());
            int affectedRows = statement.executeUpdate();
            if (affectedRows > 0) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedId = generatedKeys.getInt(1);
                        account.setAccount_id(generatedId); // Set the ID generated by the database
                        return account;
                    }
                }
            }
        }
        return null; // Insert failed
    }



    /**
     * Updates an existing Account in the database.
     * @param account The Account object to update.
     * @throws SQLException If a database error occurs.
     */
    public void updateAccount(Account account) throws SQLException {
        String sql = "UPDATE account SET username = ?, password = ? WHERE account_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, account.getUsername());
            statement.setString(2, account.getPassword());
            statement.setInt(3, account.getAccount_id(0)); // Get account ID
            statement.executeUpdate();
        }
    }

    /**
     * Deletes an Account from the database.
     * @param account_id The ID of the account to delete.
     * @throws SQLException If a database error occurs.
     */
    public void deleteAccount(int account_id) throws SQLException {
        String sql = "DELETE FROM account WHERE account_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, account_id);
            statement.executeUpdate();
        }
    }

    private Account extractAccountFromResultSet(ResultSet resultSet) throws SQLException {
        int accountId = resultSet.getInt("account_id");
        String username = resultSet.getString("username");
        String password = resultSet.getString("password");
        return new Account(accountId, username, password);
    }
}
